import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../app/store";

const initialState: { errUser: boolean; errEmail: boolean; errPass: boolean } =
  {
    errUser: false,
    errEmail: false,
    errPass: false,
  };

export const signUpSlice = createSlice({
  name: "signUp",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setErrUser: (
      state: { errUser: boolean; errEmail: boolean; errPass: boolean },
      action: PayloadAction<boolean>
    ) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.errUser = action.payload;
    },
    setErrPass: (
      state: { errUser: boolean; errEmail: boolean; errPass: boolean },
      action: PayloadAction<boolean>
    ) => {
      state.errPass = action.payload;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    setErrEmail: (
      state: { errUser: boolean; errEmail: boolean; errPass: boolean },
      action: PayloadAction<boolean>
    ) => {
      state.errEmail = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { setErrUser, setErrEmail, setErrPass } = signUpSlice.actions;

export const selectSignUp = (state: RootState) => state.signUp;
export default signUpSlice.reducer;
